{
    parserClass="com.lark.syntax.parser.LarkParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Lark"
    psiImplClassSuffix="Impl"
    psiPackage="com.lark.syntax.psi"
    psiImplPackage="com.lark.syntax.psi.impl"

    elementTypeHolderClass="com.lark.syntax.psi.LarkTypes"
    elementTypeClass="com.lark.syntax.psi.LarkElementType"
    tokenTypeClass="com.lark.syntax.psi.LarkTokenType"
}

larkFile ::= (item_ | line_end_)*

private item_ ::= rule_def
                | token_def
                | statement
private line_end_ ::= COMMENT? (NEWLINE|<<eof>>)

rule_def ::= RULE priority? [COLON expansions] line_end_
token_def ::= TOKEN priority? [COLON expansions] line_end_

priority ::= DOT [NUMBER]

statement ::= IGNORE expansions line_end_
            | IMPORT import_args [ARROW rule_name] line_end_
            | DECLARE rule_name+ line_end_

import_args ::= DOT? rule_name (DOT rule_name)*

expansions ::= alias ((COMMENT? NEWLINE)? VBAR alias)*

alias ::= expansion [ARROW [RULE]]

expansion ::= expr*

expr ::= atom [QUANT | TILDE NUMBER [DOT_DOT NUMBER]]

atom ::= OP expansions CP
       | OB expansions CB
       | STRING DOT_DOT STRING
       | rule_name
       | (REGEXP | STRING)

rule_name ::= RULE
            | TOKEN
